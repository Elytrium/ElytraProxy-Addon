plugins {
    id "java"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

group = "net.elytrium"
version = "1.0.1"
compileJava.options.encoding = "UTF-8"

repositories {
    mavenCentral()
    maven {
        name = "velocitypowered-repo"
        url = "https://nexus.velocitypowered.com/repository/maven-public/"
    }
}

dependencies {
    implementation "org.bstats:bstats-velocity:2.2.1"

    annotationProcessor "com.velocitypowered:velocity-api:3.0.2-SNAPSHOT"

    compileOnly files("libs/3.0.0.jar")
}

shadowJar {
    relocate "org.bstats", "net.elytrium.velocitytools.bstats"

    setClassifier("")
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

def targetJavaVersion = 11
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

def generateTemplates = tasks.register("generateTemplates", Copy) { task ->
    def props = [
        "version": project.version
    ]
    task.inputs.properties props

    task.from file("src/main/templates")
    task.into layout.buildDirectory.dir("generated/sources/templates")
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map {
    it.outputs
})

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates

build.dependsOn shadowJar
