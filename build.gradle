//file:noinspection GroovyAssignabilityCheck

import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id "java"
    id "checkstyle"
    id "com.github.spotbugs" version "4.7.9"
    id "org.cadixdev.licenser" version "0.6.1"
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

group = "net.elytrium"
version = "1.1.6-SNAPSHOT"

compileJava.options.encoding = "UTF-8"

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
    maven {
        name = "velocitypowered-repo"
        url = "https://nexus.velocitypowered.com/repository/maven-public/"
    }
    maven {
        name = "elytrium-repo"
        url = "https://maven.elytrium.net/repo/"
    }
}

dependencies {
    compileOnly("com.velocitypowered:velocity-api:3.1.0")
    annotationProcessor("com.velocitypowered:velocity-api:3.1.0")
    compileOnly("com.velocitypowered:velocity-proxy:3.1.0") // From Elytrium Repo

    // Needs for some velocity methods
    implementation("io.netty:netty-codec:4.1.70.Final")
    implementation("it.unimi.dsi:fastutil-core:8.5.6")

    implementation("org.bstats:bstats-velocity:2.2.1")

    compileOnly("com.github.spotbugs:spotbugs-annotations:4.5.0")
}

shadowJar {
    getArchiveClassifier().set("")

    minimize()

    relocate("org.bstats", "net.elytrium.velocitytools.bstats")
}

license {
    header = project.rootProject.file("HEADER.txt")
}

checkstyle {
    toolVersion "9.0.1"
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    configProperties = [configDirectory: "${project.rootDir}/config/checkstyle"]

    // The build should immediately fail if we have errors.
    maxErrors = 0
    maxWarnings = 0
}

tasks.withType(SpotBugsTask) {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = "fancy-hist.xsl"
        }
    }
}

sourceSets.main.java.srcDir(tasks.register("generateTemplates", Copy) { task ->
    task.inputs.properties "version": project.version

    task.from file("src/main/templates")
    task.into layout.buildDirectory.dir("generated/sources/templates")
    task.expand "version": project.version
}.map {
    it.outputs
})

assemble.dependsOn shadowJar
