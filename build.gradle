//file:noinspection VulnerableLibrariesLocal

plugins() {
  id("java")

  id("com.github.johnrengelman.shadow").version("8.1.1")

  id("checkstyle")
  id("com.github.spotbugs").version("5.0.14")
  id("org.cadixdev.licenser").version("0.6.1")

  id("com.github.gmazzo.buildconfig").version("4.1.2") // kotlin :skull:
}

this.group = "net.elytrium"
this.version = "2.0.0-SNAPSHOT"

tasks.withType(JavaCompile).configureEach() {
  options.setEncoding("UTF-8")
}

java() {
  toolchain.setLanguageVersion(JavaLanguageVersion.of(17))
}

configurations() {
  // TODO remove when checkstyle get fixed
  checkstyle() {
    resolutionStrategy.getCapabilitiesResolution().withCapability("com.google.collections:google-collections") {
      select("com.google.guava:guava:0")
    }
  }
}

repositories() {
  mavenCentral()

  maven {
    name = "papermc-repo"
    url = "https://repo.papermc.io/repository/maven-public/"
  }
  maven {
    name = "elytrium-repo"
    url = "https://maven.elytrium.net/repo/"
  }
}

dependencies() {
  annotationProcessor(libs.velocity.api)
  compileOnly(libs.bundles.velocity)

  // Needs for some velocity methods.
  compileOnly("io.netty:netty-transport:4.1.101.Final")
  compileOnly("it.unimi.dsi:fastutil-core:8.5.12")

  // To suppress VulnerableLibrariesLocal of velocity-api dependency.
  compileOnly("org.yaml:snakeyaml:2.2")

  implementation("net.elytrium.commons:kyori:1.3.0")
  implementation("net.elytrium.commons:velocity:1.3.0")
  implementation("net.elytrium.commons:utils:1.3.0")
  implementation("net.elytrium:serializer:1.1.1")
  implementation("net.elytrium:fastprepare:1.0.8")

  implementation("org.bstats:bstats-velocity:3.0.2")
}

shadowJar() {
  archiveClassifier = null

  minimize()
  enableRelocation = true
  relocationPrefix = "net.elytrium.velocitytools.3rdparty"
}

checkstyle() {
  toolVersion = libs.versions.checkstyle.get()

  configFile = rootProject.file(".config/checkstyle/checkstyle.xml")
  maxErrors = 0
  maxWarnings = 0
}

checkstyleMain() {
  exclude("**/BuildConfig.java")
}

spotbugsMain() {
  excludeFilter.set(rootProject.file(".config/spotbugs/suppressions.xml"))
  reports.register("html") {
    required = true
    outputLocation.value(layout.buildDirectory.file("reports/spotbugs/spotbugs.html"))
    stylesheet = "fancy-hist.xsl"
  }
}

license() {
  header = file("HEADER.txt")

  exclude("**/BuildConfig.java")
}

buildConfig() {
  packageName("${this.group}.velocitytools")
  buildConfigField("String", "VERSION", "\"${this.version}\"")
}

assemble.dependsOn(shadowJar)
